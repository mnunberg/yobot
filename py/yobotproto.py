# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_yobotproto', [dirname(__file__)])
        except ImportError:
            import _yobotproto
            return _yobotproto
        if fp is not None:
            try:
                _mod = imp.load_module('_yobotproto', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _yobotproto = swig_import_helper()
    del swig_import_helper
else:
    import _yobotproto
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def cdata(*args):
  return _yobotproto.cdata(*args)
cdata = _yobotproto.cdata

def memmove(*args):
  return _yobotproto.memmove(*args)
memmove = _yobotproto.memmove

def malloc_void(*args):
  return _yobotproto.malloc_void(*args)
malloc_void = _yobotproto.malloc_void

def free_void(*args):
  return _yobotproto.free_void(*args)
free_void = _yobotproto.free_void

def tovoid(*args):
  return _yobotproto.tovoid(*args)
tovoid = _yobotproto.tovoid
PURPLE_MESSAGE_SEND = _yobotproto.PURPLE_MESSAGE_SEND
PURPLE_MESSAGE_RECV = _yobotproto.PURPLE_MESSAGE_RECV
PURPLE_MESSAGE_SYSTEM = _yobotproto.PURPLE_MESSAGE_SYSTEM
PURPLE_MESSAGE_AUTO_RESP = _yobotproto.PURPLE_MESSAGE_AUTO_RESP
PURPLE_MESSAGE_ACTIVE_ONLY = _yobotproto.PURPLE_MESSAGE_ACTIVE_ONLY
PURPLE_MESSAGE_NICK = _yobotproto.PURPLE_MESSAGE_NICK
PURPLE_MESSAGE_NO_LOG = _yobotproto.PURPLE_MESSAGE_NO_LOG
PURPLE_MESSAGE_WHISPER = _yobotproto.PURPLE_MESSAGE_WHISPER
PURPLE_MESSAGE_ERROR = _yobotproto.PURPLE_MESSAGE_ERROR
PURPLE_MESSAGE_DELAYED = _yobotproto.PURPLE_MESSAGE_DELAYED
PURPLE_MESSAGE_RAW = _yobotproto.PURPLE_MESSAGE_RAW
PURPLE_MESSAGE_IMAGES = _yobotproto.PURPLE_MESSAGE_IMAGES
PURPLE_MESSAGE_NOTIFY = _yobotproto.PURPLE_MESSAGE_NOTIFY
PURPLE_MESSAGE_NO_LINKIFY = _yobotproto.PURPLE_MESSAGE_NO_LINKIFY
PURPLE_MESSAGE_INVISIBLE = _yobotproto.PURPLE_MESSAGE_INVISIBLE
YOBOT_MAX_COMMSIZE = _yobotproto.YOBOT_MAX_COMMSIZE
YOBOT_USER_SELF = _yobotproto.YOBOT_USER_SELF
YOBOT_TEXT_DELIM = _yobotproto.YOBOT_TEXT_DELIM
YOBOT_CMD_ROOM_JOIN = _yobotproto.YOBOT_CMD_ROOM_JOIN
YOBOT_CMD_ROOM_LEAVE = _yobotproto.YOBOT_CMD_ROOM_LEAVE
YOBOT_CMD_ROOM_GET = _yobotproto.YOBOT_CMD_ROOM_GET
YOBOT_CMD_MSG_SEND = _yobotproto.YOBOT_CMD_MSG_SEND
YOBOT_CMD_USER_UNIGNORE = _yobotproto.YOBOT_CMD_USER_UNIGNORE
YOBOT_CMD_USER_IGNORE = _yobotproto.YOBOT_CMD_USER_IGNORE
YOBOT_CMD_USER_ADD = _yobotproto.YOBOT_CMD_USER_ADD
YOBOT_CMD_USER_REMOVE = _yobotproto.YOBOT_CMD_USER_REMOVE
YOBOT_CMD_USER_AUTHORIZE_ADD_ACCEPT = _yobotproto.YOBOT_CMD_USER_AUTHORIZE_ADD_ACCEPT
YOBOT_CMD_USER_AUTHORIZE_ADD_DENY = _yobotproto.YOBOT_CMD_USER_AUTHORIZE_ADD_DENY
YOBOT_CMD_CONNECT = _yobotproto.YOBOT_CMD_CONNECT
YOBOT_CMD_SHUTDOWN = _yobotproto.YOBOT_CMD_SHUTDOWN
YOBOT_CMD_ACCT_ENABLE = _yobotproto.YOBOT_CMD_ACCT_ENABLE
YOBOT_CMD_ACCT_DISABLE = _yobotproto.YOBOT_CMD_ACCT_DISABLE
YOBOT_CMD_ACCT_REMOVE = _yobotproto.YOBOT_CMD_ACCT_REMOVE
YOBOT_CMD_ACCT_NEW = _yobotproto.YOBOT_CMD_ACCT_NEW
YOBOT_CMD_ACCT_ID_REQUEST = _yobotproto.YOBOT_CMD_ACCT_ID_REQUEST
YOBOT_CMD_STATUS_CHANGE = _yobotproto.YOBOT_CMD_STATUS_CHANGE
YOBOT_CMD_CLIENT_REGISTER = _yobotproto.YOBOT_CMD_CLIENT_REGISTER
YOBOT_CMD_ROOM_FETCH_USERS = _yobotproto.YOBOT_CMD_ROOM_FETCH_USERS
YOBOT_CMD_FETCH_BUDDIES = _yobotproto.YOBOT_CMD_FETCH_BUDDIES
YOBOT_CMD_FETCH_BUDDY_ICONS = _yobotproto.YOBOT_CMD_FETCH_BUDDY_ICONS
YOBOT_CMD_REQUEST_BACKLOG = _yobotproto.YOBOT_CMD_REQUEST_BACKLOG
YOBOT_PURPLE_ACCOUNT = _yobotproto.YOBOT_PURPLE_ACCOUNT
YOBOT_PURPLE_CONV = _yobotproto.YOBOT_PURPLE_CONV
YOBOT_PURPLE_CORE = _yobotproto.YOBOT_PURPLE_CORE
YOBOT_EVENT_DUMMY = _yobotproto.YOBOT_EVENT_DUMMY
YOBOT_EVENT_CONNECTED = _yobotproto.YOBOT_EVENT_CONNECTED
YOBOT_EVENT_CONNECTING = _yobotproto.YOBOT_EVENT_CONNECTING
YOBOT_EVENT_DISCONNECTED = _yobotproto.YOBOT_EVENT_DISCONNECTED
YOBOT_EVENT_NOTICE = _yobotproto.YOBOT_EVENT_NOTICE
YOBOT_EVENT_ACCT_REGISTERED = _yobotproto.YOBOT_EVENT_ACCT_REGISTERED
YOBOT_EVENT_ACCT_UNREGISTERED = _yobotproto.YOBOT_EVENT_ACCT_UNREGISTERED
YOBOT_EVENT_ACCT_REMOVED = _yobotproto.YOBOT_EVENT_ACCT_REMOVED
YOBOT_EVENT_ACCT_ID_CHANGE = _yobotproto.YOBOT_EVENT_ACCT_ID_CHANGE
YOBOT_EVENT_ACCT_ID_NEW = _yobotproto.YOBOT_EVENT_ACCT_ID_NEW
YOBOT_EVENT_AUTH_FAIL = _yobotproto.YOBOT_EVENT_AUTH_FAIL
YOBOT_EVENT_LOGIN_ERR = _yobotproto.YOBOT_EVENT_LOGIN_ERR
YOBOT_EVENT_LOGIN_TIMEOUT = _yobotproto.YOBOT_EVENT_LOGIN_TIMEOUT
YOBOT_EVENT_ROOM_JOINED = _yobotproto.YOBOT_EVENT_ROOM_JOINED
YOBOT_EVENT_ROOM_JOINING = _yobotproto.YOBOT_EVENT_ROOM_JOINING
YOBOT_EVENT_ROOM_JOIN_FAILED = _yobotproto.YOBOT_EVENT_ROOM_JOIN_FAILED
YOBOT_EVENT_ROOM_LEFT = _yobotproto.YOBOT_EVENT_ROOM_LEFT
YOBOT_EVENT_ROOM_USER_JOIN = _yobotproto.YOBOT_EVENT_ROOM_USER_JOIN
YOBOT_EVENT_ROOM_USER_LEFT = _yobotproto.YOBOT_EVENT_ROOM_USER_LEFT
YOBOT_EVENT_USER_ADDREQ = _yobotproto.YOBOT_EVENT_USER_ADDREQ
YOBOT_EVENT_STATUS_CHANGE = _yobotproto.YOBOT_EVENT_STATUS_CHANGE
YOBOT_EVENT_ERR = _yobotproto.YOBOT_EVENT_ERR
YOBOT_EVENT_CLIENT_REGISTERED = _yobotproto.YOBOT_EVENT_CLIENT_REGISTERED
YOBOT_EVENT_CLIENT_REGISTER_ID_UNAVAILABLE = _yobotproto.YOBOT_EVENT_CLIENT_REGISTER_ID_UNAVAILABLE
YOBOT_EVENT_CLIENT_ERR_BADREQUEST = _yobotproto.YOBOT_EVENT_CLIENT_ERR_BADREQUEST
YOBOT_EVENT_BUDDY_ONLINE = _yobotproto.YOBOT_EVENT_BUDDY_ONLINE
YOBOT_EVENT_BUDDY_OFFLINE = _yobotproto.YOBOT_EVENT_BUDDY_OFFLINE
YOBOT_EVENT_BUDDY_INVISIBLE = _yobotproto.YOBOT_EVENT_BUDDY_INVISIBLE
YOBOT_EVENT_BUDDY_BUSY = _yobotproto.YOBOT_EVENT_BUDDY_BUSY
YOBOT_EVENT_BUDDY_IDLE = _yobotproto.YOBOT_EVENT_BUDDY_IDLE
YOBOT_EVENT_BUDDY_UNIDLE = _yobotproto.YOBOT_EVENT_BUDDY_UNIDLE
YOBOT_EVENT_BUDDY_AWAY = _yobotproto.YOBOT_EVENT_BUDDY_AWAY
YOBOT_EVENT_BUDDY_BRB = _yobotproto.YOBOT_EVENT_BUDDY_BRB
YOBOT_EVENT_BUDDY_GOT_ICON = _yobotproto.YOBOT_EVENT_BUDDY_GOT_ICON
YOBOT_EVENT_ROOM_FETCH_USER_RESPONSE = _yobotproto.YOBOT_EVENT_ROOM_FETCH_USER_RESPONSE
YOBOT_EVENT_ROOM_FETCH_USER_RESPONSE_END = _yobotproto.YOBOT_EVENT_ROOM_FETCH_USER_RESPONSE_END
YOBOT_EVENT_BUDDY_FETCH_RESPONSE = _yobotproto.YOBOT_EVENT_BUDDY_FETCH_RESPONSE
YOBOT_EVENT_BUDDY_FETCH_RESPONSE_END = _yobotproto.YOBOT_EVENT_BUDDY_FETCH_RESPONSE_END
YOBOT_INFO = _yobotproto.YOBOT_INFO
YOBOT_WARN = _yobotproto.YOBOT_WARN
YOBOT_CRIT = _yobotproto.YOBOT_CRIT
YOBOT_PURPLE_CONNECTION_ERROR = _yobotproto.YOBOT_PURPLE_CONNECTION_ERROR
YOBOT_CLIENT_INTERNAL = _yobotproto.YOBOT_CLIENT_INTERNAL
YOBOT_CLIENT_ERROR = _yobotproto.YOBOT_CLIENT_ERROR
YOBOT_COMMTYPE_CMD = _yobotproto.YOBOT_COMMTYPE_CMD
YOBOT_COMMTYPE_EVENT = _yobotproto.YOBOT_COMMTYPE_EVENT
YOBOT_COMMTYPE_RESULT = _yobotproto.YOBOT_COMMTYPE_RESULT
YOBOT_COMMTYPE_STREAM = _yobotproto.YOBOT_COMMTYPE_STREAM
YOBOT_SUCCESS = _yobotproto.YOBOT_SUCCESS
YOBOT_ERR_ENOTINROOM = _yobotproto.YOBOT_ERR_ENOTINROOM
YOBOT_ERR_ENOTCONNECTED = _yobotproto.YOBOT_ERR_ENOTCONNECTED
YOBOT_ERR_ENOSUCHUSER = _yobotproto.YOBOT_ERR_ENOSUCHUSER
YOBOT_ERR_INTERNAL = _yobotproto.YOBOT_ERR_INTERNAL
YOBOT_MSG_TYPE_CHAT = _yobotproto.YOBOT_MSG_TYPE_CHAT
YOBOT_MSG_TYPE_IM = _yobotproto.YOBOT_MSG_TYPE_IM
YOBOT_MSG_ATTENTION = _yobotproto.YOBOT_MSG_ATTENTION
YOBOT_MSG_TO_SERVER = _yobotproto.YOBOT_MSG_TO_SERVER
YOBOT_RESPONSE = _yobotproto.YOBOT_RESPONSE
YOBOT_RESPONSE_END = _yobotproto.YOBOT_RESPONSE_END
YOBOT_BACKLOG = _yobotproto.YOBOT_BACKLOG
YOBOT_DATA_IS_BINARY = _yobotproto.YOBOT_DATA_IS_BINARY
YOBOT_YAHOO = _yobotproto.YOBOT_YAHOO
YOBOT_AIM = _yobotproto.YOBOT_AIM
YOBOT_IRC = _yobotproto.YOBOT_IRC
YOBOT_MSN = _yobotproto.YOBOT_MSN
YOBOT_GTALK = _yobotproto.YOBOT_GTALK
YOBOT_JABBER = _yobotproto.YOBOT_JABBER
class yobotcomm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yobotcomm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yobotcomm, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _yobotproto.yobotcomm_len_set
    __swig_getmethods__["len"] = _yobotproto.yobotcomm_len_get
    if _newclass:len = _swig_property(_yobotproto.yobotcomm_len_get, _yobotproto.yobotcomm_len_set)
    __swig_setmethods__["type"] = _yobotproto.yobotcomm_type_set
    __swig_getmethods__["type"] = _yobotproto.yobotcomm_type_get
    if _newclass:type = _swig_property(_yobotproto.yobotcomm_type_get, _yobotproto.yobotcomm_type_set)
    __swig_setmethods__["flags"] = _yobotproto.yobotcomm_flags_set
    __swig_getmethods__["flags"] = _yobotproto.yobotcomm_flags_get
    if _newclass:flags = _swig_property(_yobotproto.yobotcomm_flags_get, _yobotproto.yobotcomm_flags_set)
    __swig_setmethods__["reference"] = _yobotproto.yobotcomm_reference_set
    __swig_getmethods__["reference"] = _yobotproto.yobotcomm_reference_get
    if _newclass:reference = _swig_property(_yobotproto.yobotcomm_reference_get, _yobotproto.yobotcomm_reference_set)
    def __init__(self): 
        this = _yobotproto.new_yobotcomm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete_yobotcomm
    __del__ = lambda self : None;
yobotcomm_swigregister = _yobotproto.yobotcomm_swigregister
yobotcomm_swigregister(yobotcomm)

yobot_proto_tpl_comm_layout = _yobotproto.yobot_proto_tpl_comm_layout
yobot_proto_tpl_comm = _yobotproto.yobot_proto_tpl_comm
class yobotmsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yobotmsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yobotmsg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["to_len"] = _yobotproto.yobotmsg_to_len_set
    __swig_getmethods__["to_len"] = _yobotproto.yobotmsg_to_len_get
    if _newclass:to_len = _swig_property(_yobotproto.yobotmsg_to_len_get, _yobotproto.yobotmsg_to_len_set)
    __swig_setmethods__["data_len"] = _yobotproto.yobotmsg_data_len_set
    __swig_getmethods__["data_len"] = _yobotproto.yobotmsg_data_len_get
    if _newclass:data_len = _swig_property(_yobotproto.yobotmsg_data_len_get, _yobotproto.yobotmsg_data_len_set)
    __swig_setmethods__["who_len"] = _yobotproto.yobotmsg_who_len_set
    __swig_getmethods__["who_len"] = _yobotproto.yobotmsg_who_len_get
    if _newclass:who_len = _swig_property(_yobotproto.yobotmsg_who_len_get, _yobotproto.yobotmsg_who_len_set)
    __swig_setmethods__["msgtime"] = _yobotproto.yobotmsg_msgtime_set
    __swig_getmethods__["msgtime"] = _yobotproto.yobotmsg_msgtime_get
    if _newclass:msgtime = _swig_property(_yobotproto.yobotmsg_msgtime_get, _yobotproto.yobotmsg_msgtime_set)
    __swig_setmethods__["msgflags"] = _yobotproto.yobotmsg_msgflags_set
    __swig_getmethods__["msgflags"] = _yobotproto.yobotmsg_msgflags_get
    if _newclass:msgflags = _swig_property(_yobotproto.yobotmsg_msgflags_get, _yobotproto.yobotmsg_msgflags_set)
    def __init__(self): 
        this = _yobotproto.new_yobotmsg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete_yobotmsg
    __del__ = lambda self : None;
yobotmsg_swigregister = _yobotproto.yobotmsg_swigregister
yobotmsg_swigregister(yobotmsg)

yobot_proto_tpl_msg_layout = _yobotproto.yobot_proto_tpl_msg_layout
yobot_proto_tpl_msg = _yobotproto.yobot_proto_tpl_msg
class yobotcmd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yobotcmd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yobotcmd, name)
    __repr__ = _swig_repr
    __swig_setmethods__["command"] = _yobotproto.yobotcmd_command_set
    __swig_getmethods__["command"] = _yobotproto.yobotcmd_command_get
    if _newclass:command = _swig_property(_yobotproto.yobotcmd_command_get, _yobotproto.yobotcmd_command_set)
    __swig_setmethods__["acct_id"] = _yobotproto.yobotcmd_acct_id_set
    __swig_getmethods__["acct_id"] = _yobotproto.yobotcmd_acct_id_get
    if _newclass:acct_id = _swig_property(_yobotproto.yobotcmd_acct_id_get, _yobotproto.yobotcmd_acct_id_set)
    __swig_setmethods__["len"] = _yobotproto.yobotcmd_len_set
    __swig_getmethods__["len"] = _yobotproto.yobotcmd_len_get
    if _newclass:len = _swig_property(_yobotproto.yobotcmd_len_get, _yobotproto.yobotcmd_len_set)
    def __init__(self): 
        this = _yobotproto.new_yobotcmd()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete_yobotcmd
    __del__ = lambda self : None;
yobotcmd_swigregister = _yobotproto.yobotcmd_swigregister
yobotcmd_swigregister(yobotcmd)

yobot_proto_tpl_cmd_layout = _yobotproto.yobot_proto_tpl_cmd_layout
yobot_proto_tpl_cmd = _yobotproto.yobot_proto_tpl_cmd
class yobotmkacct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yobotmkacct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yobotmkacct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["improto"] = _yobotproto.yobotmkacct_improto_set
    __swig_getmethods__["improto"] = _yobotproto.yobotmkacct_improto_get
    if _newclass:improto = _swig_property(_yobotproto.yobotmkacct_improto_get, _yobotproto.yobotmkacct_improto_set)
    __swig_setmethods__["id"] = _yobotproto.yobotmkacct_id_set
    __swig_getmethods__["id"] = _yobotproto.yobotmkacct_id_get
    if _newclass:id = _swig_property(_yobotproto.yobotmkacct_id_get, _yobotproto.yobotmkacct_id_set)
    __swig_setmethods__["namelen"] = _yobotproto.yobotmkacct_namelen_set
    __swig_getmethods__["namelen"] = _yobotproto.yobotmkacct_namelen_get
    if _newclass:namelen = _swig_property(_yobotproto.yobotmkacct_namelen_get, _yobotproto.yobotmkacct_namelen_set)
    __swig_setmethods__["passlen"] = _yobotproto.yobotmkacct_passlen_set
    __swig_getmethods__["passlen"] = _yobotproto.yobotmkacct_passlen_get
    if _newclass:passlen = _swig_property(_yobotproto.yobotmkacct_passlen_get, _yobotproto.yobotmkacct_passlen_set)
    def __init__(self): 
        this = _yobotproto.new_yobotmkacct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete_yobotmkacct
    __del__ = lambda self : None;
yobotmkacct_swigregister = _yobotproto.yobotmkacct_swigregister
yobotmkacct_swigregister(yobotmkacct)

yobot_proto_tpl_mkacct_layout = _yobotproto.yobot_proto_tpl_mkacct_layout
yobot_proto_tpl_mkacct = _yobotproto.yobot_proto_tpl_mkacct
class yobotevent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yobotevent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yobotevent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["event"] = _yobotproto.yobotevent_event_set
    __swig_getmethods__["event"] = _yobotproto.yobotevent_event_get
    if _newclass:event = _swig_property(_yobotproto.yobotevent_event_get, _yobotproto.yobotevent_event_set)
    __swig_setmethods__["purple_type"] = _yobotproto.yobotevent_purple_type_set
    __swig_getmethods__["purple_type"] = _yobotproto.yobotevent_purple_type_get
    if _newclass:purple_type = _swig_property(_yobotproto.yobotevent_purple_type_get, _yobotproto.yobotevent_purple_type_set)
    __swig_setmethods__["event_type"] = _yobotproto.yobotevent_event_type_set
    __swig_getmethods__["event_type"] = _yobotproto.yobotevent_event_type_get
    if _newclass:event_type = _swig_property(_yobotproto.yobotevent_event_type_get, _yobotproto.yobotevent_event_type_set)
    __swig_setmethods__["obj_id"] = _yobotproto.yobotevent_obj_id_set
    __swig_getmethods__["obj_id"] = _yobotproto.yobotevent_obj_id_get
    if _newclass:obj_id = _swig_property(_yobotproto.yobotevent_obj_id_get, _yobotproto.yobotevent_obj_id_set)
    __swig_setmethods__["len"] = _yobotproto.yobotevent_len_set
    __swig_getmethods__["len"] = _yobotproto.yobotevent_len_get
    if _newclass:len = _swig_property(_yobotproto.yobotevent_len_get, _yobotproto.yobotevent_len_set)
    def __init__(self): 
        this = _yobotproto.new_yobotevent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete_yobotevent
    __del__ = lambda self : None;
yobotevent_swigregister = _yobotproto.yobotevent_swigregister
yobotevent_swigregister(yobotevent)

yobot_proto_tpl_event_layout = _yobotproto.yobot_proto_tpl_event_layout
yobot_proto_tpl_event = _yobotproto.yobot_proto_tpl_event
class yobotmsg_internal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yobotmsg_internal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yobotmsg_internal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["yomsg"] = _yobotproto.yobotmsg_internal_yomsg_set
    __swig_getmethods__["yomsg"] = _yobotproto.yobotmsg_internal_yomsg_get
    if _newclass:yomsg = _swig_property(_yobotproto.yobotmsg_internal_yomsg_get, _yobotproto.yobotmsg_internal_yomsg_set)
    __swig_setmethods__["to"] = _yobotproto.yobotmsg_internal_to_set
    __swig_getmethods__["to"] = _yobotproto.yobotmsg_internal_to_get
    if _newclass:to = _swig_property(_yobotproto.yobotmsg_internal_to_get, _yobotproto.yobotmsg_internal_to_set)
    __swig_setmethods__["txt"] = _yobotproto.yobotmsg_internal_txt_set
    __swig_getmethods__["txt"] = _yobotproto.yobotmsg_internal_txt_get
    if _newclass:txt = _swig_property(_yobotproto.yobotmsg_internal_txt_get, _yobotproto.yobotmsg_internal_txt_set)
    __swig_setmethods__["who"] = _yobotproto.yobotmsg_internal_who_set
    __swig_getmethods__["who"] = _yobotproto.yobotmsg_internal_who_get
    if _newclass:who = _swig_property(_yobotproto.yobotmsg_internal_who_get, _yobotproto.yobotmsg_internal_who_set)
    def __init__(self): 
        this = _yobotproto.new_yobotmsg_internal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete_yobotmsg_internal
    __del__ = lambda self : None;
yobotmsg_internal_swigregister = _yobotproto.yobotmsg_internal_swigregister
yobotmsg_internal_swigregister(yobotmsg_internal)

yobot_proto_tpl_msgi = _yobotproto.yobot_proto_tpl_msgi
class yobotmkacct_internal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yobotmkacct_internal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yobotmkacct_internal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["yomkacct"] = _yobotproto.yobotmkacct_internal_yomkacct_set
    __swig_getmethods__["yomkacct"] = _yobotproto.yobotmkacct_internal_yomkacct_get
    if _newclass:yomkacct = _swig_property(_yobotproto.yobotmkacct_internal_yomkacct_get, _yobotproto.yobotmkacct_internal_yomkacct_set)
    __swig_setmethods__["user"] = _yobotproto.yobotmkacct_internal_user_set
    __swig_getmethods__["user"] = _yobotproto.yobotmkacct_internal_user_get
    if _newclass:user = _swig_property(_yobotproto.yobotmkacct_internal_user_get, _yobotproto.yobotmkacct_internal_user_set)
    __swig_setmethods__["_pass"] = _yobotproto.yobotmkacct_internal__pass_set
    __swig_getmethods__["_pass"] = _yobotproto.yobotmkacct_internal__pass_get
    if _newclass:_pass = _swig_property(_yobotproto.yobotmkacct_internal__pass_get, _yobotproto.yobotmkacct_internal__pass_set)
    def __init__(self): 
        this = _yobotproto.new_yobotmkacct_internal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete_yobotmkacct_internal
    __del__ = lambda self : None;
yobotmkacct_internal_swigregister = _yobotproto.yobotmkacct_internal_swigregister
yobotmkacct_internal_swigregister(yobotmkacct_internal)

yobot_proto_tpl_mkaccti = _yobotproto.yobot_proto_tpl_mkaccti
class yobotevent_internal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yobotevent_internal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yobotevent_internal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["evt"] = _yobotproto.yobotevent_internal_evt_set
    __swig_getmethods__["evt"] = _yobotproto.yobotevent_internal_evt_get
    if _newclass:evt = _swig_property(_yobotproto.yobotevent_internal_evt_get, _yobotproto.yobotevent_internal_evt_set)
    __swig_setmethods__["data"] = _yobotproto.yobotevent_internal_data_set
    __swig_getmethods__["data"] = _yobotproto.yobotevent_internal_data_get
    if _newclass:data = _swig_property(_yobotproto.yobotevent_internal_data_get, _yobotproto.yobotevent_internal_data_set)
    def __init__(self): 
        this = _yobotproto.new_yobotevent_internal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete_yobotevent_internal
    __del__ = lambda self : None;
yobotevent_internal_swigregister = _yobotproto.yobotevent_internal_swigregister
yobotevent_internal_swigregister(yobotevent_internal)

yobot_proto_tpl_eventi = _yobotproto.yobot_proto_tpl_eventi
class _cmd_data_u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cmd_data_u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cmd_data_u, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgpayload"] = _yobotproto._cmd_data_u_msgpayload_set
    __swig_getmethods__["msgpayload"] = _yobotproto._cmd_data_u_msgpayload_get
    if _newclass:msgpayload = _swig_property(_yobotproto._cmd_data_u_msgpayload_get, _yobotproto._cmd_data_u_msgpayload_set)
    __swig_setmethods__["acctreqpayload"] = _yobotproto._cmd_data_u_acctreqpayload_set
    __swig_getmethods__["acctreqpayload"] = _yobotproto._cmd_data_u_acctreqpayload_get
    if _newclass:acctreqpayload = _swig_property(_yobotproto._cmd_data_u_acctreqpayload_get, _yobotproto._cmd_data_u_acctreqpayload_set)
    __swig_setmethods__["simple_cmd_payload"] = _yobotproto._cmd_data_u_simple_cmd_payload_set
    __swig_getmethods__["simple_cmd_payload"] = _yobotproto._cmd_data_u_simple_cmd_payload_get
    if _newclass:simple_cmd_payload = _swig_property(_yobotproto._cmd_data_u_simple_cmd_payload_get, _yobotproto._cmd_data_u_simple_cmd_payload_set)
    def __init__(self): 
        this = _yobotproto.new__cmd_data_u()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete__cmd_data_u
    __del__ = lambda self : None;
_cmd_data_u_swigregister = _yobotproto._cmd_data_u_swigregister
_cmd_data_u_swigregister(_cmd_data_u)

class _cmd_type_u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cmd_type_u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cmd_type_u, name)
    __repr__ = _swig_repr
    __swig_setmethods__["simple_cmdpayload"] = _yobotproto._cmd_type_u_simple_cmdpayload_set
    __swig_getmethods__["simple_cmdpayload"] = _yobotproto._cmd_type_u_simple_cmdpayload_get
    if _newclass:simple_cmdpayload = _swig_property(_yobotproto._cmd_type_u_simple_cmdpayload_get, _yobotproto._cmd_type_u_simple_cmdpayload_set)
    __swig_setmethods__["msg"] = _yobotproto._cmd_type_u_msg_set
    __swig_getmethods__["msg"] = _yobotproto._cmd_type_u_msg_get
    if _newclass:msg = _swig_property(_yobotproto._cmd_type_u_msg_get, _yobotproto._cmd_type_u_msg_set)
    __swig_setmethods__["accreq"] = _yobotproto._cmd_type_u_accreq_set
    __swig_getmethods__["accreq"] = _yobotproto._cmd_type_u_accreq_get
    if _newclass:accreq = _swig_property(_yobotproto._cmd_type_u_accreq_get, _yobotproto._cmd_type_u_accreq_set)
    def __init__(self): 
        this = _yobotproto.new__cmd_type_u()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete__cmd_type_u
    __del__ = lambda self : None;
_cmd_type_u_swigregister = _yobotproto._cmd_type_u_swigregister
_cmd_type_u_swigregister(_cmd_type_u)

class yobotcmd_internal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yobotcmd_internal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yobotcmd_internal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cmd"] = _yobotproto.yobotcmd_internal_cmd_set
    __swig_getmethods__["cmd"] = _yobotproto.yobotcmd_internal_cmd_get
    if _newclass:cmd = _swig_property(_yobotproto.yobotcmd_internal_cmd_get, _yobotproto.yobotcmd_internal_cmd_set)
    __swig_setmethods__["type"] = _yobotproto.yobotcmd_internal_type_set
    __swig_getmethods__["type"] = _yobotproto.yobotcmd_internal_type_get
    if _newclass:type = _swig_property(_yobotproto.yobotcmd_internal_type_get, _yobotproto.yobotcmd_internal_type_set)
    __swig_setmethods__["data"] = _yobotproto.yobotcmd_internal_data_set
    __swig_getmethods__["data"] = _yobotproto.yobotcmd_internal_data_get
    if _newclass:data = _swig_property(_yobotproto.yobotcmd_internal_data_get, _yobotproto.yobotcmd_internal_data_set)
    def __init__(self): 
        this = _yobotproto.new_yobotcmd_internal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete_yobotcmd_internal
    __del__ = lambda self : None;
yobotcmd_internal_swigregister = _yobotproto.yobotcmd_internal_swigregister
yobotcmd_internal_swigregister(yobotcmd_internal)

class _comm_type_u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _comm_type_u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _comm_type_u, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cmd_s"] = _yobotproto._comm_type_u_cmd_s_set
    __swig_getmethods__["cmd_s"] = _yobotproto._comm_type_u_cmd_s_get
    if _newclass:cmd_s = _swig_property(_yobotproto._comm_type_u_cmd_s_get, _yobotproto._comm_type_u_cmd_s_set)
    __swig_setmethods__["evt"] = _yobotproto._comm_type_u_evt_set
    __swig_getmethods__["evt"] = _yobotproto._comm_type_u_evt_get
    if _newclass:evt = _swig_property(_yobotproto._comm_type_u_evt_get, _yobotproto._comm_type_u_evt_set)
    def __init__(self): 
        this = _yobotproto.new__comm_type_u()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete__comm_type_u
    __del__ = lambda self : None;
_comm_type_u_swigregister = _yobotproto._comm_type_u_swigregister
_comm_type_u_swigregister(_comm_type_u)

class _comm_data_u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _comm_data_u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _comm_data_u, name)
    __repr__ = _swig_repr
    __swig_setmethods__["simple_comm_data"] = _yobotproto._comm_data_u_simple_comm_data_set
    __swig_getmethods__["simple_comm_data"] = _yobotproto._comm_data_u_simple_comm_data_get
    if _newclass:simple_comm_data = _swig_property(_yobotproto._comm_data_u_simple_comm_data_get, _yobotproto._comm_data_u_simple_comm_data_set)
    __swig_setmethods__["cmddata_u"] = _yobotproto._comm_data_u_cmddata_u_set
    __swig_getmethods__["cmddata_u"] = _yobotproto._comm_data_u_cmddata_u_get
    if _newclass:cmddata_u = _swig_property(_yobotproto._comm_data_u_cmddata_u_get, _yobotproto._comm_data_u_cmddata_u_set)
    def __init__(self): 
        this = _yobotproto.new__comm_data_u()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete__comm_data_u
    __del__ = lambda self : None;
_comm_data_u_swigregister = _yobotproto._comm_data_u_swigregister
_comm_data_u_swigregister(_comm_data_u)

class yobot_proto_model_internal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yobot_proto_model_internal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yobot_proto_model_internal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["comm"] = _yobotproto.yobot_proto_model_internal_comm_set
    __swig_getmethods__["comm"] = _yobotproto.yobot_proto_model_internal_comm_get
    if _newclass:comm = _swig_property(_yobotproto.yobot_proto_model_internal_comm_get, _yobotproto.yobot_proto_model_internal_comm_set)
    __swig_setmethods__["commtype_u"] = _yobotproto.yobot_proto_model_internal_commtype_u_set
    __swig_getmethods__["commtype_u"] = _yobotproto.yobot_proto_model_internal_commtype_u_get
    if _newclass:commtype_u = _swig_property(_yobotproto.yobot_proto_model_internal_commtype_u_get, _yobotproto.yobot_proto_model_internal_commtype_u_set)
    __swig_setmethods__["commdata_u"] = _yobotproto.yobot_proto_model_internal_commdata_u_set
    __swig_getmethods__["commdata_u"] = _yobotproto.yobot_proto_model_internal_commdata_u_get
    if _newclass:commdata_u = _swig_property(_yobotproto.yobot_proto_model_internal_commdata_u_get, _yobotproto.yobot_proto_model_internal_commdata_u_set)
    def __init__(self): 
        this = _yobotproto.new_yobot_proto_model_internal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete_yobot_proto_model_internal
    __del__ = lambda self : None;
yobot_proto_model_internal_swigregister = _yobotproto.yobot_proto_model_internal_swigregister
yobot_proto_model_internal_swigregister(yobot_proto_model_internal)

YOBOT_PROTOCLIENT_TO_FD = _yobotproto.YOBOT_PROTOCLIENT_TO_FD
YOBOT_PROTOCLIENT_TO_BUF = _yobotproto.YOBOT_PROTOCLIENT_TO_BUF
YOBOT_PROTOCLIENT_YCMDI = _yobotproto.YOBOT_PROTOCLIENT_YCMDI
YOBOT_PROTOCLIENT_YMSGI = _yobotproto.YOBOT_PROTOCLIENT_YMSGI
YOBOT_PROTOCLIENT_YEVTI = _yobotproto.YOBOT_PROTOCLIENT_YEVTI
YOBOT_PROTOCLIENT_YMKACCTI = _yobotproto.YOBOT_PROTOCLIENT_YMKACCTI
YOBOT_PROTOCLIENT_CMD_SIMPLE = _yobotproto.YOBOT_PROTOCLIENT_CMD_SIMPLE
class yobot_protoclient_segment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yobot_protoclient_segment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yobot_protoclient_segment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["struct_type"] = _yobotproto.yobot_protoclient_segment_struct_type_set
    __swig_getmethods__["struct_type"] = _yobotproto.yobot_protoclient_segment_struct_type_get
    if _newclass:struct_type = _swig_property(_yobotproto.yobot_protoclient_segment_struct_type_get, _yobotproto.yobot_protoclient_segment_struct_type_set)
    __swig_setmethods__["comm"] = _yobotproto.yobot_protoclient_segment_comm_set
    __swig_getmethods__["comm"] = _yobotproto.yobot_protoclient_segment_comm_get
    if _newclass:comm = _swig_property(_yobotproto.yobot_protoclient_segment_comm_get, _yobotproto.yobot_protoclient_segment_comm_set)
    __swig_setmethods__["cmdi"] = _yobotproto.yobot_protoclient_segment_cmdi_set
    __swig_getmethods__["cmdi"] = _yobotproto.yobot_protoclient_segment_cmdi_get
    if _newclass:cmdi = _swig_property(_yobotproto.yobot_protoclient_segment_cmdi_get, _yobotproto.yobot_protoclient_segment_cmdi_set)
    __swig_setmethods__["msgi"] = _yobotproto.yobot_protoclient_segment_msgi_set
    __swig_getmethods__["msgi"] = _yobotproto.yobot_protoclient_segment_msgi_get
    if _newclass:msgi = _swig_property(_yobotproto.yobot_protoclient_segment_msgi_get, _yobotproto.yobot_protoclient_segment_msgi_set)
    __swig_setmethods__["evi"] = _yobotproto.yobot_protoclient_segment_evi_set
    __swig_getmethods__["evi"] = _yobotproto.yobot_protoclient_segment_evi_get
    if _newclass:evi = _swig_property(_yobotproto.yobot_protoclient_segment_evi_get, _yobotproto.yobot_protoclient_segment_evi_set)
    __swig_setmethods__["mkaccti"] = _yobotproto.yobot_protoclient_segment_mkaccti_set
    __swig_getmethods__["mkaccti"] = _yobotproto.yobot_protoclient_segment_mkaccti_get
    if _newclass:mkaccti = _swig_property(_yobotproto.yobot_protoclient_segment_mkaccti_get, _yobotproto.yobot_protoclient_segment_mkaccti_set)
    __swig_setmethods__["rawdata"] = _yobotproto.yobot_protoclient_segment_rawdata_set
    __swig_getmethods__["rawdata"] = _yobotproto.yobot_protoclient_segment_rawdata_get
    if _newclass:rawdata = _swig_property(_yobotproto.yobot_protoclient_segment_rawdata_get, _yobotproto.yobot_protoclient_segment_rawdata_set)
    def __init__(self): 
        this = _yobotproto.new_yobot_protoclient_segment()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete_yobot_protoclient_segment
    __del__ = lambda self : None;
yobot_protoclient_segment_swigregister = _yobotproto.yobot_protoclient_segment_swigregister
yobot_protoclient_segment_swigregister(yobot_protoclient_segment)

class segment_r(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, segment_r, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, segment_r, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _yobotproto.segment_r_len_set
    __swig_getmethods__["len"] = _yobotproto.segment_r_len_get
    if _newclass:len = _swig_property(_yobotproto.segment_r_len_get, _yobotproto.segment_r_len_set)
    __swig_setmethods__["data"] = _yobotproto.segment_r_data_set
    __swig_getmethods__["data"] = _yobotproto.segment_r_data_get
    if _newclass:data = _swig_property(_yobotproto.segment_r_data_get, _yobotproto.segment_r_data_set)
    __swig_setmethods__["read_return"] = _yobotproto.segment_r_read_return_set
    __swig_getmethods__["read_return"] = _yobotproto.segment_r_read_return_get
    if _newclass:read_return = _swig_property(_yobotproto.segment_r_read_return_get, _yobotproto.segment_r_read_return_set)
    def __init__(self): 
        this = _yobotproto.new_segment_r()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete_segment_r
    __del__ = lambda self : None;
segment_r_swigregister = _yobotproto.segment_r_swigregister
segment_r_swigregister(segment_r)

class yobot_eventinfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yobot_eventinfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yobot_eventinfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["commflags"] = _yobotproto.yobot_eventinfo_commflags_set
    __swig_getmethods__["commflags"] = _yobotproto.yobot_eventinfo_commflags_get
    if _newclass:commflags = _swig_property(_yobotproto.yobot_eventinfo_commflags_get, _yobotproto.yobot_eventinfo_commflags_set)
    __swig_setmethods__["reference"] = _yobotproto.yobot_eventinfo_reference_set
    __swig_getmethods__["reference"] = _yobotproto.yobot_eventinfo_reference_get
    if _newclass:reference = _swig_property(_yobotproto.yobot_eventinfo_reference_get, _yobotproto.yobot_eventinfo_reference_set)
    __swig_setmethods__["event"] = _yobotproto.yobot_eventinfo_event_set
    __swig_getmethods__["event"] = _yobotproto.yobot_eventinfo_event_get
    if _newclass:event = _swig_property(_yobotproto.yobot_eventinfo_event_get, _yobotproto.yobot_eventinfo_event_set)
    __swig_setmethods__["purple_type"] = _yobotproto.yobot_eventinfo_purple_type_set
    __swig_getmethods__["purple_type"] = _yobotproto.yobot_eventinfo_purple_type_get
    if _newclass:purple_type = _swig_property(_yobotproto.yobot_eventinfo_purple_type_get, _yobotproto.yobot_eventinfo_purple_type_set)
    __swig_setmethods__["acctid"] = _yobotproto.yobot_eventinfo_acctid_set
    __swig_getmethods__["acctid"] = _yobotproto.yobot_eventinfo_acctid_get
    if _newclass:acctid = _swig_property(_yobotproto.yobot_eventinfo_acctid_get, _yobotproto.yobot_eventinfo_acctid_set)
    __swig_setmethods__["severity"] = _yobotproto.yobot_eventinfo_severity_set
    __swig_getmethods__["severity"] = _yobotproto.yobot_eventinfo_severity_get
    if _newclass:severity = _swig_property(_yobotproto.yobot_eventinfo_severity_get, _yobotproto.yobot_eventinfo_severity_set)
    __swig_setmethods__["data"] = _yobotproto.yobot_eventinfo_data_set
    __swig_getmethods__["data"] = _yobotproto.yobot_eventinfo_data_get
    if _newclass:data = _swig_property(_yobotproto.yobot_eventinfo_data_get, _yobotproto.yobot_eventinfo_data_set)
    __swig_setmethods__["len"] = _yobotproto.yobot_eventinfo_len_set
    __swig_getmethods__["len"] = _yobotproto.yobot_eventinfo_len_get
    if _newclass:len = _swig_property(_yobotproto.yobot_eventinfo_len_get, _yobotproto.yobot_eventinfo_len_set)
    def __init__(self): 
        this = _yobotproto.new_yobot_eventinfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete_yobot_eventinfo
    __del__ = lambda self : None;
yobot_eventinfo_swigregister = _yobotproto.yobot_eventinfo_swigregister
yobot_eventinfo_swigregister(yobot_eventinfo)

class yobot_msginfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yobot_msginfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yobot_msginfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["commflags"] = _yobotproto.yobot_msginfo_commflags_set
    __swig_getmethods__["commflags"] = _yobotproto.yobot_msginfo_commflags_get
    if _newclass:commflags = _swig_property(_yobotproto.yobot_msginfo_commflags_get, _yobotproto.yobot_msginfo_commflags_set)
    __swig_setmethods__["reference"] = _yobotproto.yobot_msginfo_reference_set
    __swig_getmethods__["reference"] = _yobotproto.yobot_msginfo_reference_get
    if _newclass:reference = _swig_property(_yobotproto.yobot_msginfo_reference_get, _yobotproto.yobot_msginfo_reference_set)
    __swig_setmethods__["purple_flags"] = _yobotproto.yobot_msginfo_purple_flags_set
    __swig_getmethods__["purple_flags"] = _yobotproto.yobot_msginfo_purple_flags_get
    if _newclass:purple_flags = _swig_property(_yobotproto.yobot_msginfo_purple_flags_get, _yobotproto.yobot_msginfo_purple_flags_set)
    __swig_setmethods__["acctid"] = _yobotproto.yobot_msginfo_acctid_set
    __swig_getmethods__["acctid"] = _yobotproto.yobot_msginfo_acctid_get
    if _newclass:acctid = _swig_property(_yobotproto.yobot_msginfo_acctid_get, _yobotproto.yobot_msginfo_acctid_set)
    __swig_setmethods__["msgtime"] = _yobotproto.yobot_msginfo_msgtime_set
    __swig_getmethods__["msgtime"] = _yobotproto.yobot_msginfo_msgtime_get
    if _newclass:msgtime = _swig_property(_yobotproto.yobot_msginfo_msgtime_get, _yobotproto.yobot_msginfo_msgtime_set)
    __swig_setmethods__["who"] = _yobotproto.yobot_msginfo_who_set
    __swig_getmethods__["who"] = _yobotproto.yobot_msginfo_who_get
    if _newclass:who = _swig_property(_yobotproto.yobot_msginfo_who_get, _yobotproto.yobot_msginfo_who_set)
    __swig_setmethods__["to"] = _yobotproto.yobot_msginfo_to_set
    __swig_getmethods__["to"] = _yobotproto.yobot_msginfo_to_get
    if _newclass:to = _swig_property(_yobotproto.yobot_msginfo_to_get, _yobotproto.yobot_msginfo_to_set)
    __swig_setmethods__["txt"] = _yobotproto.yobot_msginfo_txt_set
    __swig_getmethods__["txt"] = _yobotproto.yobot_msginfo_txt_get
    if _newclass:txt = _swig_property(_yobotproto.yobot_msginfo_txt_get, _yobotproto.yobot_msginfo_txt_set)
    def __init__(self): 
        this = _yobotproto.new_yobot_msginfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete_yobot_msginfo
    __del__ = lambda self : None;
yobot_msginfo_swigregister = _yobotproto.yobot_msginfo_swigregister
yobot_msginfo_swigregister(yobot_msginfo)

class yobot_cmdinfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yobot_cmdinfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yobot_cmdinfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["commflags"] = _yobotproto.yobot_cmdinfo_commflags_set
    __swig_getmethods__["commflags"] = _yobotproto.yobot_cmdinfo_commflags_get
    if _newclass:commflags = _swig_property(_yobotproto.yobot_cmdinfo_commflags_get, _yobotproto.yobot_cmdinfo_commflags_set)
    __swig_setmethods__["command"] = _yobotproto.yobot_cmdinfo_command_set
    __swig_getmethods__["command"] = _yobotproto.yobot_cmdinfo_command_get
    if _newclass:command = _swig_property(_yobotproto.yobot_cmdinfo_command_get, _yobotproto.yobot_cmdinfo_command_set)
    __swig_setmethods__["reference"] = _yobotproto.yobot_cmdinfo_reference_set
    __swig_getmethods__["reference"] = _yobotproto.yobot_cmdinfo_reference_get
    if _newclass:reference = _swig_property(_yobotproto.yobot_cmdinfo_reference_get, _yobotproto.yobot_cmdinfo_reference_set)
    __swig_setmethods__["acctid"] = _yobotproto.yobot_cmdinfo_acctid_set
    __swig_getmethods__["acctid"] = _yobotproto.yobot_cmdinfo_acctid_get
    if _newclass:acctid = _swig_property(_yobotproto.yobot_cmdinfo_acctid_get, _yobotproto.yobot_cmdinfo_acctid_set)
    __swig_setmethods__["data"] = _yobotproto.yobot_cmdinfo_data_set
    __swig_getmethods__["data"] = _yobotproto.yobot_cmdinfo_data_get
    if _newclass:data = _swig_property(_yobotproto.yobot_cmdinfo_data_get, _yobotproto.yobot_cmdinfo_data_set)
    __swig_setmethods__["len"] = _yobotproto.yobot_cmdinfo_len_set
    __swig_getmethods__["len"] = _yobotproto.yobot_cmdinfo_len_get
    if _newclass:len = _swig_property(_yobotproto.yobot_cmdinfo_len_get, _yobotproto.yobot_cmdinfo_len_set)
    def __init__(self): 
        this = _yobotproto.new_yobot_cmdinfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete_yobot_cmdinfo
    __del__ = lambda self : None;
yobot_cmdinfo_swigregister = _yobotproto.yobot_cmdinfo_swigregister
yobot_cmdinfo_swigregister(yobot_cmdinfo)

class yobot_mkacctinfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, yobot_mkacctinfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, yobot_mkacctinfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["commflags"] = _yobotproto.yobot_mkacctinfo_commflags_set
    __swig_getmethods__["commflags"] = _yobotproto.yobot_mkacctinfo_commflags_get
    if _newclass:commflags = _swig_property(_yobotproto.yobot_mkacctinfo_commflags_get, _yobotproto.yobot_mkacctinfo_commflags_set)
    __swig_setmethods__["reference"] = _yobotproto.yobot_mkacctinfo_reference_set
    __swig_getmethods__["reference"] = _yobotproto.yobot_mkacctinfo_reference_get
    if _newclass:reference = _swig_property(_yobotproto.yobot_mkacctinfo_reference_get, _yobotproto.yobot_mkacctinfo_reference_set)
    __swig_setmethods__["user"] = _yobotproto.yobot_mkacctinfo_user_set
    __swig_getmethods__["user"] = _yobotproto.yobot_mkacctinfo_user_get
    if _newclass:user = _swig_property(_yobotproto.yobot_mkacctinfo_user_get, _yobotproto.yobot_mkacctinfo_user_set)
    __swig_setmethods__["password"] = _yobotproto.yobot_mkacctinfo_password_set
    __swig_getmethods__["password"] = _yobotproto.yobot_mkacctinfo_password_get
    if _newclass:password = _swig_property(_yobotproto.yobot_mkacctinfo_password_get, _yobotproto.yobot_mkacctinfo_password_set)
    __swig_setmethods__["acctid"] = _yobotproto.yobot_mkacctinfo_acctid_set
    __swig_getmethods__["acctid"] = _yobotproto.yobot_mkacctinfo_acctid_get
    if _newclass:acctid = _swig_property(_yobotproto.yobot_mkacctinfo_acctid_get, _yobotproto.yobot_mkacctinfo_acctid_set)
    __swig_setmethods__["improto"] = _yobotproto.yobot_mkacctinfo_improto_set
    __swig_getmethods__["improto"] = _yobotproto.yobot_mkacctinfo_improto_get
    if _newclass:improto = _swig_property(_yobotproto.yobot_mkacctinfo_improto_get, _yobotproto.yobot_mkacctinfo_improto_set)
    def __init__(self): 
        this = _yobotproto.new_yobot_mkacctinfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _yobotproto.delete_yobot_mkacctinfo
    __del__ = lambda self : None;
yobot_mkacctinfo_swigregister = _yobotproto.yobot_mkacctinfo_swigregister
yobot_mkacctinfo_swigregister(yobot_mkacctinfo)


def yobot_proto_segment_encode(*args):
  return _yobotproto.yobot_proto_segment_encode(*args)
yobot_proto_segment_encode = _yobotproto.yobot_proto_segment_encode

def yobot_protoclient_comm_encode(*args):
  return _yobotproto.yobot_protoclient_comm_encode(*args)
yobot_protoclient_comm_encode = _yobotproto.yobot_protoclient_comm_encode

def yobot_protoclient_cmd_encode(*args):
  return _yobotproto.yobot_protoclient_cmd_encode(*args)
yobot_protoclient_cmd_encode = _yobotproto.yobot_protoclient_cmd_encode

def yobot_protoclient_mkacct_encode(*args):
  return _yobotproto.yobot_protoclient_mkacct_encode(*args)
yobot_protoclient_mkacct_encode = _yobotproto.yobot_protoclient_mkacct_encode

def yobot_protoclient_msg_encode(*args):
  return _yobotproto.yobot_protoclient_msg_encode(*args)
yobot_protoclient_msg_encode = _yobotproto.yobot_protoclient_msg_encode

def yobot_protoclient_event_encode(*args):
  return _yobotproto.yobot_protoclient_event_encode(*args)
yobot_protoclient_event_encode = _yobotproto.yobot_protoclient_event_encode

def yobot_protoclient_segment_decode(*args):
  return _yobotproto.yobot_protoclient_segment_decode(*args)
yobot_protoclient_segment_decode = _yobotproto.yobot_protoclient_segment_decode

def yobot_protoclient_segment_decode_from_buf(*args):
  return _yobotproto.yobot_protoclient_segment_decode_from_buf(*args)
yobot_protoclient_segment_decode_from_buf = _yobotproto.yobot_protoclient_segment_decode_from_buf

def yobot_proto_read_segment(*args):
  return _yobotproto.yobot_proto_read_segment(*args)
yobot_proto_read_segment = _yobotproto.yobot_proto_read_segment

def yobot_proto_segfrombuf(*args):
  return _yobotproto.yobot_proto_segfrombuf(*args)
yobot_proto_segfrombuf = _yobotproto.yobot_proto_segfrombuf

def yobot_protoclient_getsegsize(*args):
  return _yobotproto.yobot_protoclient_getsegsize(*args)
yobot_protoclient_getsegsize = _yobotproto.yobot_protoclient_getsegsize

def yobot_protoclient_free_segment(*args):
  return _yobotproto.yobot_protoclient_free_segment(*args)
yobot_protoclient_free_segment = _yobotproto.yobot_protoclient_free_segment


